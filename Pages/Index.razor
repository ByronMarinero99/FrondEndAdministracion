@layout LoginLayout
@page "/"

@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorageService
@inject HttpClient Http

<div >
    <!-- Fondo con imagen y desenfoque -->
    <div class="absolute inset-0 z-0 bg-black blur-2" style="background-image: url('/images/fondo.png'); background-size: cover; background-position: center;">
        <div class="absolute inset-0 bg-black opacity-75"></div> <!-- Fondo oscuro -->
    </div>

    <EditForm Model="@user" OnValidSubmit="OnValidSubmit">
        <section class="text-gray-600 body-font relative">
            <!-- Contenedor principal con posición relativa -->

            <div class="container px-5 py-24 mx-auto flex flex-wrap items-center relative">
                <!-- Contenedor de contenido con posición relativa -->

                <div class="animate-bounce w-6 h-6 lg:w-3/5 md:w-1/2 md:pr-16 lg:pr-0 pr-0 z-1">
                    <!-- Contenido de texto con z-index 1 -->
                    <h1 class="title-font font-medium text-3xl text-white">GameHub Administración - Una plataforma para el mantenimiento de registros de juegos multiplataforma completamente gratis</h1>
                    <p class="leading-relaxed mt-4 text-white">GameHub se crea con el propósito de ofrecer mejores alternativas a los usuarios para que puedan descargar los mejores juegos.</p>
                </div>
                <div class="animate__animated animate__bounce-once lg:w-2/6 md:w-1/2 bg-gray-100 rounded-lg p-8 flex flex-col md:ml-auto w-full mt-10 md:mt-0 z-1 ">
                    <!-- Contenedor de formulario con z-index 1 -->

                    <div class="animate-bounce mx-auto">
                        <MudImage ObjectFit="ObjectFit.Contain" Src="/images/byrongames.png" Width="80" Height="55" Alt="Swedish Farm House" Elevation="0" Class="rounded-lg mt-4" />
                    </div>

                    <div class="relative mb-4">
                        <label class="leading-7 text-sm text-red-800 text-white"></label>
                        <MudItem>
                            <MudTextField Label="Usuario" Class="mt-3 text-red-800" @bind-Value="user.Login" For="@(() => user.Login)" />
                        </MudItem>
                    </div>
                    <div class="relative mb-4">
                        <label class="leading-7 text-sm text-red-800 text-white"></label>
                        <MudItem>
                            <MudTextField Label="Password" Class="mt-3 text-red-800" @bind-Value="user.Password" For="@(() => user.Password)" InputType="InputType.Password" />
                        </MudItem>
                    </div>


                    <button class="text-white bg-red-500 border-0 py-2 px-8 focus:outline-none hover:bg-red-600 rounded text-lg">
                        <MudItem>
                            <MudButton ButtonType="ButtonType.Submit" Class="text-white">Login</MudButton>
                        </MudItem>
                    </button>
                    <p class="text-xs text-gray-500 mt-3 text-black">Credenciales proporcionadas únicamente a administradores.</p>
                </div>
            </div>
            @if (showLeaveAlert)
            {
                <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))" class="z-1">
                    <!-- Alerta con z-index 1 -->
                    No se reconocen las credenciales ingresadas.
                </MudAlert>
            }
        </section>
    </EditForm>
</div>







@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private bool showLeaveAlert = false;

    UserLogin user = new UserLogin();
    bool success;


    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        if (user.Identity != null)
        {
            if (user.Identity.IsAuthenticated)
            {
                NavigationManager.NavigateTo($"/home");
            }
        }
    }

    protected async Task OnValidSubmit()
    {
        var httpResponse = await Http.PostAsJsonAsync<UserLogin>("usuario/login", user);

        if (!(httpResponse.StatusCode == System.Net.HttpStatusCode.OK))
        {
            showLeaveAlert = true;
        }
        else
        {
            var contentResponse = await httpResponse.Content.ReadAsStringAsync();
            var token = contentResponse;
            if (token != null)
            {
                await _localStorageService.SetItemAsync("token", token);
                NavigationManager.NavigateTo($"home", forceLoad: true);
            }
            else
            {
                showLeaveAlert = true;
            }
        }
    }

    private void CloseMe(bool value)
    {
        showLeaveAlert = false;
    }
}
